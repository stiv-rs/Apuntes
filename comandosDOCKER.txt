======================== IMAGENES ========================

docker login
docker logout
docker help										| comandos de docker.
docker comando --help							| ayuda para los comandos en especifico comandos de docker .
docker attach id_contenedor     					| Adjuntar flujos de error, salida y entrada estándar local a un contenedor en ejecución.
docker commit                   				| Crear una nueva imagen a partir de los cambios de un contenedor.
docker cp                       					| Copie archivos/carpetas entre un contenedor y el sistema de archivos local .
docker create                   					| Crear un nuevo contenedor .
docker diff   	   								| Inspeccionar cambios en archivos o directorios en el sistema de archivos de un contenedor.
docker events 	   								| Obtenga eventos en tiempo real del servidor.
docker export 	   								| Exportar el sistema de archivos de un contenedor como un archivo tar.
docker history	   								| Mostrar el historial de una imagen.
docker import 	   								| Importe el contenido de un tarball para crear una imagen del sistema de archivos.
docker inspect	   								| Devolver información de bajo nivel sobre objetos Docker.
docker kill   	   								| Mata uno o más contenedores en ejecución.
docker load   	   								| Cargue una imagen desde un archivo tar o STDIN.
docker logs   	   								| Obtener los registros de un contenedor.
docker pause  	   								| Pausa todos los procesos dentro de uno o más contenedores.
docker port   	   								| Lista de asignaciones de puertos o una asignación específica para el contenedor.
docker rename 	   								| Cambiar el nombre de un contenedor.
docker restart	   								| Reiniciar uno o más contenedores.
docker rmi    	   								| Eliminar una o más imágenes.
docker save   	   								| Guarde una o más imágenes en un archivo tar (transmitido a STDOUT de forma predeterminada).
docker start  	   								| Iniciar uno o más contenedores detenidos.
docker stats  	   								| Mostrar una transmisión en vivo de estadísticas de uso de recursos de contenedores.
docker stop   	   								| Detener uno o más contenedores en ejecución.
docker tag    	   								| Cree una etiqueta TARGET_IMAGE que haga referencia a SOURCE_IMAGE.
docker top    	   								| Mostrar los procesos en ejecución de un contenedor.
docker unpause	   								| Reanudar todos los procesos dentro de uno o más contenedores.
docker update 	   								| Actualizar la configuración de uno o más contenedores.
docker wait   	   								| Bloquee hasta que uno o más contenedores se detengan, luego imprima sus códigos de salida.
docker ps -a       								| Ver los contenedores detenidos.
docker build -t nombre . 							| Crear una nueva imagen con una etiqueta.
docker build -t nombre . -f ruta_Archivo			| Crear una nueva imagen con una etiqueta y adicional indicandole donde esta el archivo.
docker build -t nombre:v2 . -f ruta_Archivo			| Crear una nueva imagen con una etiqueta con version.
docker images									| Listar imagenes.
docker image prune								| elimina todas las imagenesque no tengan contenedor si aplicamos a forza el borrado.

================ El comando que emplearemos: https://github.com/jenkinsci/docker/blob/master/README.md#usage ============

docker run -d -v $(pwd)/jenkins_home:/var/jenkins_home   		| arrancar jenkins dockerizado desde linux .
		   -p 8080:8080 
		   -p 50000:50000 
		   -p 9080:9080 
		   -e JENKINS_OPTS="--httpPort=9080" 
		   --name jenkins jenkins/jenkins:lts
		   
docker run -d -v C:/Users/Dell/jenkins_home:/var/jenkins_home  	|arrancar Jenkins contenerizado desde windows.
		   -p 8081:8081 
		   -p 50000:50000 
		   -p 9080:9080 
		   -e JENKINS_OPTS="--httpPort=9080" 
		   --name jenkins jenkins/jenkins:lts
		   
======================== Desarrollo del comando========================

docker run: Lanza el contenedor de Jenkins
-d: en modo desatendido
-v: monta el volumen de JENKINS_HOME en nuestro sistema de archivos (así el home será perdurable)
-p: redirige los puertos de acuerdo a la siguiente sintaxis
http://localhost:9080 —> El Jenkins en si. La primera vez será el asistente de configuración
http://localhost:50000 —> Tendremos información relativa a la instalación
http://localhost:8080 —> Lo emplearemos en el futuro, en prácticas
-e JENKINS_OPTS=”—httpPort=9080”: modificamos el puerto de Jenkins
—name: podremos darle un nombre concreto a nuestro contenedor
jenkins/jenkins:lts: escogeremos la versión “LTS”: Long-term support

docker build -t usuarios:latest . -f .\msvc-usuarios\Dockerfile  						| construir la imagen de usuarios.
docker build -t cursos:latest . -f .\msvc-cursos\Dockerfile  	 						| construye la imagen de cursos.
docker run -p 8001:8001 -d --rm --name msvc-usuarios --network spring usuarios  	| correr el contenedor msvc usuarios.
docker run -p 8002:8002 -d --rm --name msvc-cursos --network spring cursos		| correr el contenedor msvc cursos. 
docker run -d -p 3307:3306 
		   --name mysql8 
		   --network spring 
		   -e MYSQL_ROOT_PASSWORD=Admin1903 
		   -e MYSQL_DATABASE=msvc_usuarios 
		   -v data-mysql:/var/lib/mysql 
		   --restart=always mysql:8											| dockerizar mysql.
docker run -p 5532:5432 
		   --name postgres14 
		   --network spring 
		   -e POSTGRES_PASSWORD=sasa 
		   -e POSTGRES_DB=msvc_cursos 
		   -d -v data-postgres:/var/lib/postgresql/data 
		   --restart=always postgres:14-alpine  									| dockerizar postgres.

docker run -it --rm --network spring mysql:8 bash								| comando para entrar a la consola de comandos de mysql.
mysql -hmysql8 -uroot -p 
show databases;
use msvc_usuarios;
show tables;
desc usuarios;
select * from usuarios;
exit

docker run -it --rm --network spring postgres:14-alpine psql -h postgres14 -U postgres 		| ingresa a la consola interactiva de postgres.
\l; //lista las bd
\c msvc_cursos; //muestra la BD
\dt; //lista las tablas
\d+ cusros //describe la tabla cursos
select * from cursos;
exit



================================ CONTENEDORES ================================

docker run --name + contenedor									| le da un nombre al contenedor.
docker rename + nomContenedor + nuevo nombre					|renombra al contenedor.
docker ps  		   												| Lista contenedores.
docker ps -a  		   											| Lista contenedores que se estan y no ejecutando.
docker rm nomContenedor											| elimina contenedor de acuerdo al nombre que se le ponga.
docker rm -f  nomContenedor										| elimina contenedor de acuerdo al nombre que se le ponga forzadamente.
docker container prune											| elimina todos los contenedores en estado exited = apagados.
docker run -it ubuntu 											| Corre un ubuntu dentro de mi maquina de modo dockerizado.
docker container inspect											| analiza contenedores.
docker run 														| correr un contenedor (Atach).
docker run -d													| correr un contenedor (Dtach).
docker start 	 													| reiniciar un contenedor(Dtach).
docker run --name nomCont -d -p 8080:80 contenedor				| expone( -p de publish) un contenedor por el puerto 8080 de mi maquina y por el 80 del contenedor .
docker run -p 8001:8001 -d nombre_imagen 							| correr un contenedor en segundo plano.
docker run -p 8001:8001 --rm nombre_imagen						| correr un contenedor pero eliminar cuando se detiene.
docker run -p 8001:8001  -it nombre_imagen /bin/sh					| correr un contenedor interactua en el contenedor pero cambiar el ENTRYPOINT por CMD en el docker file.
docker run -p 8001:8001  --rm -d --name nombre_contenedor etiqueta:v version				| colocar nombre al contenedor y etiqueta.
docker run -d --name nomContenedor -v /ruta/						| corre un contenedor desde un ditachs agregando un BindMount.
docker run -d --naame nomCont --memory 1g nomTAG				| corre un contenedor limitando el recurso para que corra.
docker exec nomCont ps -ef										| permite ver como esta corriendo el proceso si como SHELL o como EXEC.
docker run -p 8001:8001 --rm -it usuarios /bin/sh					| ingresa a la shell del contenedor usuarios.
docker stop														| detener un contenedor.
docker attach nombre_contenedor									| atacha el contenedor.
docker attach -f nombre_contenedor								| atacha el contenedor para futuros logs.
docker logs -f nombre_contenedor									| se puede ver el log actual sin atachar(ocupar el terminal no deja ejecutar mas comandos) con ctl+c sale de los logs.
docker logs --tail 10 -f nombre_contenedor							| permite ver las 10 ultimas líneas de logs sin atachar la consola.
docker cp . ruta_archivo_copiar id_contenedor: ruta_donde_copiar		| se puede copiar archivos de la maquina al contenedor.
docker cp id_contenedor: ruta_maquina_local . ruta_contenedor			| se puede copiar archivos del contenedor a la maquina fisica local..
docker exec -it nomContenedor + bash								| ejecuta una consola desde ubuntu, tambien sirve para ejecutar comandos dentro.
docker volume create nomVolume									| crea un volumen en docker.
docker run -d --name nomContenedor --mount src=nomVolume.dst=/data/db nomCont				| agrega el contenedor al volumen  LinuxUbuntu2023$.
docker build -t ubuntu:platzi .										| crea una imagen de ubuntu con el nombre platzi .este punto apunta al fichero donde estamos ubicados.
docker tag nomContenedor:nomTAG usuDockerHub/nomImagen 	| cambia el nombre del tag para publicar esta imagen en nuestro docker hub .ej docker tag ubuntu:platzi srodriguezs34/ubuntu:platzi.
docker history repository:tag 								| muestra el historial de la imagen.
docker network create --attachable nomRed					| crea una red para conectar otro contenedor como e.j conectarse a una BBDD.
docker network inspect nomRed							| inspecciona los datos de la red.
docker network connect nomRed nomCont					| conecta el conetenedor a esa red.
docker network ls										| lista las redes que hayamos creado.
docker run -d --name nonApp -p 8080:8080 --env URL_coneccion_a _BD nombreImagen	 | publica una imagen con todos los parametros necesarios para conectar la app a la BD.
docker-compose up -d									| para usar compose hay que descargar la libreia y componer el YML de configuración.
docker-compose ps 										| lista los contenedores en compose o que se corrieron en el.
docker-compose logs -f nomApp							| muestra los logs de esa imagen a medida que se van generando.
docker-compose down 									| elimmina los proecesos que estan corriendo.
docker-compose.override.yml								| se crea este archivo para sobreescribir el documento como alternativa al principal.
docker ps -q												| muestra lis id de los contenedores que estan corriendo pero que no estan activos.
docker rm -f $(docker ps -aq)								| borra todos los contenedores y procesos que esten corriendo.
docker system prune 										| eliminma y limpia todo del sistema.
sudo docker rmi -f $(sudo docker images -a -q)				| elimina todas las imagenes de manera forzada.
docker stats												| muestra el consumo de recursos.
docker ps -l												| debug al contenedor.
docker build -t nomApp -f build/archivo.Dockerfile .			| inicia la imagen desde otro dockerfile y no solo del local.
docker build -t usuarios . -f .\msvc-usuarios\Dockerfile 		| inicia el contenedor con la imagen compilando el jar desde el dockerfile que se haya creado.
docker compose up -d									| Levanta el docker compose .
docker up --build -d 										| levanta el docker compose y construye las imagenes primero antes de lanzar los contenedores.
docker tag kubernetes-msvc-msvc-usuarios srodriguezs34/usuarios			|clona la imagen del contenedor para poder pusharla a docker hub.
docker tag usuarios srodriguezs34/usuarios					| etiqueta de nuevo la imagen en caso de agregar algo a la original para hacer push al repo.


================================ DOCKER FILE BASICO ================================

FROM openjdk:17.0.2

WORKDIR /app

COPY ./target/msvc-usuarios-0.0.1-SNAPSHOT.jar .

EXPOSE 8001

ENTRYPOINT ["java","-jar","msvc-usuarios-0.0.1-SNAPSHOT.jar"]

================================DOCKER FILE OPTIMIZADO COPIANDO DEPENDENCIAS EN CACHE ================================

FROM openjdk:17-jdk-alpine as builder

WORKDIR /app/msvc-usuarios

COPY ./pom.xml /app
COPY ./msvc-usuarios/.mvn ./.mvn
COPY ./msvc-usuarios/mvnw .
COPY ./msvc-usuarios/pom.xml .

RUN ./mvnw clean package -Dmaven.test.skip -Dmaven.main.skip -Dspring-boot.repackage.skip && rm -r ./target/
# RUN ./mvnw dependency:go-offline |descarga todas las dependencias.

COPY ./msvc-usuarios/src ./src

RUN ./mvnw clean package -DskipTests

FROM openjdk:17-jdk-alpine

WORKDIR /app

COPY --from=builder /app/msvc-usuarios/target/msvc-usuarios-0.0.1-SNAPSHOT.jar .
EXPOSE 8001
 
ENTRYPOINT ["java","-jar","msvc-usuarios-0.0.1-SNAPSHOT.jar"]
# CMD sleep 20 & java -jar msvc-usuarios-0.0.1-SNAPSHOT.jar  | en vez del entrypoint se ejecuta este comando para dar un tiempo para iniociar el servicio en la nube.

================================================================================================================================


================================ CONFIGURACIÓN DEL PROPERTIES PARA HACER UN DELAI ================================

spring.datasource.hikari.connection-timeout=20000
spring.datasource.hikari.maximum-pool-size=15
spring.datasource.hikari.minimum-idle=0
spring.datasource.hikari.initialization-fail-timeout=-1
spring.datasource.continue-on-error=true

================================================================================================================================